Step 1: Set Up the .NET 8 API
Create the Project:

bash
Copy code
dotnet new webapi -n PollApi
cd PollApi
Add Required Packages:

bash
Copy code
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
dotnet add package Microsoft.EntityFrameworkCore.Tools
dotnet add package Microsoft.AspNetCore.Identity
Create Models: Create a folder named Models and add the following classes.

User.cs:

csharp
Copy code
public class User
{
    public int Id { get; set; }
    public string Username { get; set; }
    public string PasswordHash { get; set; }
}
Poll.cs:

csharp
Copy code
public class Poll
{
    public int Id { get; set; }
    public string Question { get; set; }
    public List<string> Options { get; set; } = new();
}
Create Database Context: Create a folder named Data and add PollContext.cs:

csharp
Copy code
public class PollContext : DbContext
{
    public PollContext(DbContextOptions<PollContext> options) : base(options) { }

    public DbSet<User> Users { get; set; }
    public DbSet<Poll> Polls { get; set; }
}
Configure JWT Authentication: In Program.cs, add JWT configuration and database context.

csharp
Copy code
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using PollApi.Data;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<PollContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],
            ValidAudience = builder.Configuration["Jwt:Issuer"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
        };
    });

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();
app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();
app.UseSwagger();
app.UseSwaggerUI();
app.Run();
Add Configuration Settings: In appsettings.json, add the connection string and JWT settings:

json
Copy code
{
    "ConnectionStrings": {
        "DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=PollDb;Trusted_Connection=True;"
    },
    "Jwt": {
        "Key": "ThisIsASecretKey",
        "Issuer": "http://localhost:5000"
    }
}
Create Authentication Controller: Create a folder named Controllers and add AuthController.cs:

csharp
Copy code
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using PollApi.Data;

[Route("api/[controller]")]
[ApiController]
public class AuthController : ControllerBase
{
    private readonly PollContext _context;
    private readonly IConfiguration _configuration;

    public AuthController(PollContext context, IConfiguration configuration)
    {
        _context = context;
        _configuration = configuration;
    }

    [HttpPost("register")]
    public async Task<IActionResult> Register([FromBody] User user)
    {
        if (await _context.Users.AnyAsync(u => u.Username == user.Username))
            return BadRequest("User already exists.");

        user.PasswordHash = BCrypt.Net.BCrypt.HashPassword(user.PasswordHash);
        _context.Users.Add(user);
        await _context.SaveChangesAsync();
        return Ok();
    }

    [HttpPost("login")]
    public async Task<IActionResult> Login([FromBody] User user)
    {
        var dbUser = await _context.Users.SingleOrDefaultAsync(u => u.Username == user.Username);
        if (dbUser == null || !BCrypt.Net.BCrypt.Verify(user.PasswordHash, dbUser.PasswordHash))
            return Unauthorized();

        var tokenHandler = new JwtSecurityTokenHandler();
        var key = Encoding.ASCII.GetBytes(_configuration["Jwt:Key"]);
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new[] { new Claim(ClaimTypes.NameIdentifier, dbUser.Id.ToString()) }),
            Expires = DateTime.UtcNow.AddDays(7),
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
        };
        var token = tokenHandler.CreateToken(tokenDescriptor);
        return Ok(new { Token = tokenHandler.WriteToken(token) });
    }
}
Create Poll Controller: Add PollController.cs:

csharp
Copy code
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using PollApi.Data;

[Route("api/[controller]")]
[ApiController]
[Authorize]
public class PollController : ControllerBase
{
    private readonly PollContext _context;

    public PollController(PollContext context)
    {
        _context = context;
    }

    [HttpGet]
    public async Task<IActionResult> GetPolls()
    {
        var polls = await _context.Polls.ToListAsync();
        return Ok(polls);
    }

    [HttpPost]
    public async Task<IActionResult> CreatePoll([FromBody] Poll poll)
    {
        _context.Polls.Add(poll);
        await _context.SaveChangesAsync();
        return CreatedAtAction(nameof(GetPolls), new { id = poll.Id }, poll);
    }
}
Run Migrations: Run the following commands to create your database:

bash
Copy code
dotnet ef migrations add InitialCreate
dotnet ef database update
Step 2: Set Up the Angular Frontend
Create a New Angular Project:

bash
Copy code
ng new poll-ui
cd poll-ui
Install Required Packages:

bash
Copy code
npm install @auth0/angular-jwt
Create Authentication Service: Create auth.service.ts in src/app/services:

typescript
Copy code
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
    private apiUrl = 'http://localhost:5000/api/auth';

    constructor(private http: HttpClient) { }

    register(user: { username: string; password: string }): Observable<any> {
        return this.http.post(`${this.apiUrl}/register`, user);
    }

    login(user: { username: string; password: string }): Observable<any> {
        return this.http.post(`${this.apiUrl}/login`, user);
    }
}
Create Poll Service: Create poll.service.ts in src/app/services:

typescript
Copy code
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class PollService {
    private apiUrl = 'http://localhost:5000/api/poll';

    constructor(private http: HttpClient) { }

    getPolls(): Observable<any[]> {
        return this.http.get<any[]>(this.apiUrl);
    }

    createPoll(poll: { question: string; options: string[] }): Observable<any> {
        return this.http.post(this.apiUrl, poll);
    }
}
Create Components: Generate components for viewing and adding polls.

bash
Copy code
ng generate component poll-list
ng generate component add-poll
Set Up Routing: Update app-routing.module.ts:

typescript
Copy code
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { PollListComponent } from './poll-list/poll-list.component';
import { AddPollComponent } from './add-poll/add-poll.component';

const routes: Routes = [
    { path: 'polls', component: PollListComponent },
    { path: 'add-poll', component: AddPollComponent },
    { path: '', redirectTo: '/polls', pathMatch: 'full' }
];

@NgModule({
    imports: [RouterModule.forRoot(routes)],
    exports: [RouterModule]
})
export class AppRoutingModule { }
Implement Poll List Component: Update poll-list.component.ts:

typescript
Copy code
import { Component, OnInit } from '@angular/core';


